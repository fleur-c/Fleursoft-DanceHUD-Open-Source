// This work is licensed under a Creative Commons Attribution 3.0 Unported License (http://creativecommons.org/licenses/by/3.0/)

// This script is responsible for making all of the slave (Dancer Controller's) execute a dance
// sequence. The idea is that the dancers scripts can be really simple - only doing the minimal
// amount and nothing extra. This script will take a dance sequence which was translated into
// a time sequence of events and simply send the sequence of events to the dancer scripts.
// I.E.: This script plays the time sequences :)
//
// We completely control the dance sequence here:
// 1) We get told which sequence to start (by name and the sequence itself is sent to us! (already time ordered)
// 2) Use a highly accurate timer to send appropriate messages to the appropriate dance controllers
//
// The basic idea is that we can start a dance (which can run to the end or be stopped) and anytime
//  the user wants to stop the dance - we go into a wait sequence. Stopping stops ALL animations for
//  everyone.
//
// We also are a little smart on the start of ANY sequence - because the first animation of a
// sequence will be used to stop ALL secondary animations of a previous sequence. This is also
// why we don't at the end of a sequence stop the last dance animation - we wait till the next
// sequence starts. All to prevent any lag at all for transitions.
//
//
// Interesting aspect of this script - it does NOT know if anyone is dancing. It only controls
// dance groups. Well... technically 'everyone' on the dancehud is considered to be in the
// everyone group... the time sequences are always about things to change for a group which
// for most dance sequences happens to be only for everyone.
//
// Note: We do NOT change case or trim any input at all.
//
// The timer handling is a little non-standard - but this allows us to have very accurate timing.
// We set a timer to go off a little bit early and then spin in a loop for a little while to complete
// the correct delay. This was based on the Precision Time idea from:
//     http://lslwiki.net/lslwiki/wakka.php?wakka=LibraryPrecisionTime
// Except, they didn't read what the APIs are actually - so they parse a string to get a timestamp
// which is fairly useless cycles from my perspective. We need a very accurate timer because the dance
// sequences are timed pretty well - we want to make sure to hit the time delays correctly instead
// of 'kind of close'.

#include "Trace"
#ifdef UNIT_TEST_TRACING
#define MODULE "FSDanceControl"
#endif
// define NEED_GROUP_NAMES 1    // We need to know the group name lists in this script
#include "GlobalDefinitions"
#include "DanceControl.h"
#include "Dancers.h"
#include "Dancer.h"
#include "Lists.h"
#include "MenuList.h"
#include "Chat.h"
#include "Services.h"
#include "Debug"
#include "Keywords"
#include "Utility"
#include "UtilOwnerSay"

// Define values for what the sequence index could be (also flag indicating if we are busy doing something)
#define SEQ_INDEX_INACTIVE -1
#define SEQ_INDEX_WAITINGFORREPLY -2

// Overal time sequence infrastructure
list timeSequence = ["2|stand_1","3|3000","19"];    // Default starting sequence is a wait sequence of stand_1 that loops - it's really boring
                                      // List of time ordered dance sequence items that are used to execute during the dance sequence
                                      // ONLY the keywords and parameters of actions required are on this list!
integer timeSeqLength = 3;            // Length of dance sequence
integer timeSeqIndex = 0;             // Where are we on the list of things to do? (initially pretend we are in the wait sequence)
string seqName = "startup wait";      // Dance sequence name that is currently active
float delayValue = 0.0;               // How long was the total delay from the current time sequence item?
float shortenDelayBy = 0.020;         // How much time do we subtract from the delay to wake up early and loop a little bit?
list seqItem = [];                    // Current item in time sequence
integer danceFromMenu = Define_INVENTORYANIMLINKID;            // Which menu link number did this dance come from? (initially inventory)
integer danceStopsOthers = DanceFlagDoNotStopOtherAnimations;    // Flag for if we stop secondary animations when we start an animation
                                      //  of any dance/wait sequence (usually the first dance, but also for sync points)
integer currentKeyword = 0;           // What is the keyword we are currently executing (from a dance sequence)
integer accurateTimer = 1;            // Do we use an accurate timer or not?
string lastAnimStarted = "stand_1";   // What was the last animation we started? (sent to group all)
float danceElapsedTime = 0.0;         // Total time elapsed while dancing the current dance.
integer deferredStarted = FALSE;      // Flag for indicating we had previously started a deferred sequence (got the first set of directions for it)
integer useDefaultDuration = FALSE;   // Do we use the default dance duration? (default = NO!)
integer defaultDanceDuration = DefaultDanceDuration;    // Default dance duration - bleck

list remembered = [];                 // List of dance animations/delays that we have danced (freestyle recording)
integer rememberFlag = FALSE;         // Are we in recording mode?
string rememberDance = "";            // Dance animation we last started (for all dancers)
integer rememberMenu = 0;             // Which menu do we send the dance sequence to?
integer lastSyncPoint = 0;            // Where should we sync all the dancers to? (default of start of sequence)
integer needToRecordDelay = TRUE;     // Do we need to remember a delay after a dance animation?

list giveFromSequence = [];           // List of all the places in the sequence where we gave something away to the dancers

integer warnMissingAnim = TRUE;       // Tell the user when we find out that the dance animation is missing from inventory (sigh)
integer disableRepeat = FALSE;        // Is the [repeat] keyword enabled or not?
integer danceSequenceFlag = TRUE;     // Is the current sequence a dance sequence or a wait sequence?

string tmpStr = "";
list tmpList = [];
integer tempInt1 = 0;
integer tempInt2 = 0;
float tempFloat1;


// Define all of the action aspects of each keyword we have to do something about

#define ActionForDance() \
    /* Send dance to appropriate group via linked message - the idea is that the time ordered sequence   */ \
    /*  not only got the dances in the right order BUT that every dance has a multicast setting too.     */ \
    /*  We use this multicast bit to send the message to all of the dancers who are in the group - which */ \
    /*  means that we don't really care about the target for sure. The dance controller will do the      */ \
    /*  correct starting/stopping for us. */                          \
                                                                      \
    /* Now the dance came with a flag to indicate a start or a stop. */  \
    tempInt1 = llList2Integer(seqItem, Define_SequenceParm3);    /* Get the dance start/stop flag parameter */ \
    Debug_DanceControl("Dance - startflag:"+(string)tempInt1)         \
    if (tempInt1 == Define_DanceStart)                                \
    {                                                                 \
        /* tmpStr = Parameter #1 is the dance animation name */       \
        tempInt1 = llList2Integer(seqItem, Define_SequenceParm2);        /* #2 is multicast bits */ \
        tempInt2 = llList2Integer(seqItem, Define_SequenceParm4);        /* #4 is dance index of the controller */ \
                                                                      \
        /* If we are looking for missing animations AND the animation is NOT stand_1 (our good old standing animation */ \
        /*  that really just stands still...) then we get to check if the animation is in inventory or not */ \
        /*  (mostly - I hate this check here... but folks expect to get told when they dance instead of */ \
        /*   when the load a notecard - dumb dumb dumb - we substitute in stand_1 when the animation is missing). */ \
        if (warnMissingAnim & (tmpStr != Define_DefaultWaitAnimation)) \
        {                                                             \
            if (INVENTORY_ANIMATION != llGetInventoryType(tmpStr))    \
            {                                                         \
                OwnerSay("DCMSG019", [ tmpStr, seqName, Define_DefaultWaitAnimation ]); \
                tmpStr = Define_DefaultWaitAnimation;                 \
            }                                                         \
        }                                                             \
        MessageStartGroupDancing(tempInt1, tempInt2, tmpStr, danceStopsOthers); \
        danceStopsOthers = DanceFlagDoNotStopOtherAnimations;         \
                                                                      \
        /* Remember the last animation we started on the all group */ \
        if (tempInt1 == Define_GroupAllBits)                          \
        {                                                             \
            lastAnimStarted = tmpStr;                                 \
                                                                      \
            /* If we are remembering all dances - then this is a good time to get the dance animation and remember */ \
            /* it as a a dance. */                                    \
                                                                      \
            rememberDance = tmpStr;                                   \
            if (rememberFlag)                                         \
            {                                                         \
                tmpStr = (string)keywordDance + "|" + tmpStr;         \
                AppendStringToList(remembered, tmpStr);               \
                needToRecordDelay = TRUE;                             \
            }                                                         \
        }                                                             \
                                                                      \
        /* If we started an index 0 dance (which is our primary indicator of a sync point) then remember */ \
        /*  this sync point - for if we get a sync request */         \
        if (CheckEqZero(tempInt2))                                    \
        {                                                             \
            lastSyncPoint = timeSeqIndex;                             \
        }                                                             \
                                                                      \
        /* We reset the script time after we send the message so that the idea is that this scripts */ \
        /*  timer started when the message was delivered - so the dance should have started at */      \
        /*  as close to this time. The next keyword in any sequence is a delay - so by starting */     \
        /*  the clock early, we actually are closer to timing the dance instead of timing the */       \
        /*  delay accurately (hmm... interesting). */                                                  \
        llResetTime();                                                \
        danceElapsedTime = 0.0;                                       \
    }                                                                 \
    else                                                              \
    {                                                                 \
        if (tempInt1 == Define_DanceStop)                             \
        {                                                             \
            tempInt1 = llList2Integer(seqItem, Define_SequenceParm2); \
            tempInt2 = llList2Integer(seqItem, Define_SequenceParm4); \
            MessageStopGroupDancing(tempInt1, tempInt2);              \
                /* #2 is multicast bits & #4 is the dance index for the controllers */ \
        }                                                             \
    }

// When setting the timer event - if we are using the default duration, then we need
//  to ensure that the total duration of the dance is not beyond the default dance duration.
//  So we calculate the correct delay based on the default duration and the elapsed time.
//
// Note: We ONLY use the default timer if it is a dance sequence - wait sequences are NOT
//  subject to the default dance duration timer.
#define SetTimerEvent(value)                                                     \
    tempFloat1 = (value);                                                        \
    if (useDefaultDuration && danceSequenceFlag)                                 \
    {                                                                            \
        if ((danceElapsedTime + tempFloat1) > (float) defaultDanceDuration)      \
        {                                                                        \
            tempFloat1 = ((float) defaultDanceDuration) - danceElapsedTime;      \
        }                                                                        \
    }                                                                            \
    llSetTimerEvent(tempFloat1)
 

#define ActionForDelay()                                                         \
    float currentTime = llGetAndResetTime();                                     \
                                                                                 \
    /* If there has not been a delay specified and we are NOT recording a  */    \
    /* freestyle dance sequence - we will set the default dance delay value */   \
    tempInt1 = (integer) tmpStr;                                                 \
    if (!(rememberFlag) && (Define_DefaultNoDelayAfterDance == tempInt1))        \
    {                                                                            \
        tempInt1 = Define_DefaultDanceDuration;                                  \
    }                                                                            \
                                                                                 \
    danceElapsedTime += currentTime;                                             \
    delayValue = (((float) tempInt1) / 10.0) - currentTime;    /* Subtract off the delay of execution till this point from when the animation was started... */ \
    SetTimerEvent(delayValue - (shortenDelayBy * (float) accurateTimer))

#define ActionForDialog()                                                         \
    seqItem = llParseString2List(tmpStr, [","], []);                              \
    tmpStr = llList2String(seqItem, 0);        /* And the message that is on the dialog */ \
    tempInt1 = llList2Integer(seqItem, -1);        /* This is the dialog channel # */ \
    seqItem = DeleteListEntry(seqItem, 0);  /* Remove last and first items from list - rest are buttons */ \
    seqItem = DeleteListEntry(seqItem, -1);                                       \
    llDialog(llGetOwner(), tmpStr, seqItem, tempInt1)                             \
    Trace("ActionForDialog",tmpStr)

#define ActionForGive()                                                           \
    /* First we check if the list of give indicies contain the current location from this sequence */ \
    /* The reasoning goes like this - we have a sequence that goes like: [give]something | dance | 30 | [repeat] */ \
    /*  this will cause a 'something' to be given out every 30 seconds. Not a wonderful thing at all. */ \
    /*  So - we filter - first instance goes on through, next we stop them and don't give the same */ \
    /*  thing over and over and over. You can give multiple things - which is why we check the current */ \
    /*  time sequence index. */                                                   \
    tempInt1 = llListFindList(giveFromSequence, [timeSeqIndex]);                  \
    if (CheckEqMinusOne(tempInt1))                                                \
    {                                                                             \
        AppendIntegerToList(giveFromSequence, timeSeqIndex);                      \
                                                                                  \
        /* Send item to all dancers via the dance controller (so we don't need to know the dancer keys at all here) */ \
        if (INVENTORY_NONE != llGetInventoryType(tmpStr))                         \
        {                                                                         \
            if ((llGetInventoryPermMask(tmpStr, MASK_OWNER) & (PERM_TRANSFER|PERM_COPY)) == (PERM_TRANSFER|PERM_COPY)) \
            {                                                                     \
                MessageSendGroupItem(tmpStr);                                     \
            }                                                                     \
            else                                                                  \
            {                                                                     \
                OwnerSay("DCMSG021", [ tmpStr ] );                                \
            }                                                                     \
        }                                                                         \
        else                                                                      \
        {                                                                         \
            OwnerSay("DCMSG020", [ tmpStr ] );                                    \
        }                                                                         \
    }

#define ActionForIM() \
    /* Send IM to all dancers via the dance controller (so we don't need to know the dancer keys at all here) */ \
        MessageSendGroupIM(tmpStr)

#define ActionForMessage()                                                       \
    llSay((integer)tmpStr, llList2String(seqItem, Define_SequenceParm2))         \
    Trace("ActionForMessage",(string)timeSeqIndex)

#define ActionForNextSequence()                                                  \
    timeSeqIndex = SEQ_INDEX_WAITINGFORREPLY;                                    \
        /* Go get the time sequence for the dance sequence */                    \
    MessageSelect(danceFromMenu, tmpStr)

#define ActionForOwner_say()                                                     \
    llOwnerSay(tmpStr)                                                           \
    Trace("ActionForOwnerSay",(string)timeSeqIndex)

#define ActionForRand() \
    /* Rand is like Delay - except we have a random part and then a constant part (which is optional) */ \
    tmpList = llParseString2List(tmpStr, [" "], []);                             \
    delayValue = llFrand(llList2Float(tmpList, 0) / 10.0);    /* Make up the random part */ \
    if (llGetListLength(tmpList) > 1)                                            \
    {                                                                            \
        delayValue += llList2Float(tmpList, 1) / 10.0;                           \
    }                                                                            \
    if (delayValue < (shortenDelayBy * accurateTimer))                           \
    {                                                                            \
        delayValue += 2. * (shortenDelayBy * (float) accurateTimer);             \
    }                                                                            \
                                                                                 \
    float currentTime = llGetAndResetTime();                                     \
    danceElapsedTime += currentTime;                                             \
    Trace("ActionForRand",(string)timeSeqIndex)                                  \
    SetTimerEvent(delayValue - (shortenDelayBy * (float) accurateTimer))

#define ActionForRegion_say()                                                    \
    tempInt1 = (integer)tmpStr;                                                  \
    tmpStr = llList2String(seqItem, Define_SequenceParm2);                       \
    if (CheckEqZero(tempInt1))        /* RegionSay doesn't work for channel 0 (so says lslwiki.net) */ \
    {                                                                            \
        llShout(0, tmpStr);                                                      \
    }                                                                            \
    else                                                                         \
    {                                                                            \
        llRegionSay(tempInt1, tmpStr);                                           \
    }                                                                            \
    Trace("ActionForRegion_say",(string)tempInt1)

#define ActionForRepeat()                                                         \
    /* To repeat -  we need to stop all of the dances of the current sequence */  \
    if (!disableRepeat)                                                           \
    {                                                                             \
        MessageStopGroupDancing(Define_GroupAllBits, DancerFlagStopAllDances);    \
        timeSeqIndex = -1;    /* Return will bump this back to zero - so repeating... */ \
    }

#define ActionForSay()                                                           \
    llSay((integer)tmpStr, llList2String(seqItem, Define_SequenceParm2))         \
    Trace("ActionForSay",(string)timeSeqIndex)

#define ActionForSetname()                                                       \
    llSetObjectName(tmpStr)                                                      \
    Trace("ActionForSetname",(string)timeSeqIndex)

#define ActionForShout()                                                         \
    llShout((integer)tmpStr, llList2String(seqItem, Define_SequenceParm2))       \
    Trace("ActionForShout",(string)timeSeqIndex)

#define ActionForStop()                                                          \
    /* Stop doesn't do anything - the next animation we start will stop all animations... */ \
    /* funny that [stop] does nothing - kind of like brakes that don't stop the car. */ \
    Trace("ActionForStop",(string)timeSeqIndex)

#define ActionForWhisper()                                                       \
    llWhisper((integer)tmpStr, llList2String(seqItem, Define_SequenceParm2))     \
    Trace("ActionForWhisper",(string)timeSeqIndex)

#define ActionForZZZDefer() \
    MessageStartedSequence(tmpStr, llList2Integer(seqItem, Define_SequenceParm2))


// Define all of the operations required for each token in ordering the sequence
//  The basic operation will be to simply append an action to the dance sequence
//  The group/loop commands will be a little different as they have effects on the
//  time sequencing of the list.

// Include the binary search routines to order sequences by time OR execute the dance sequence
#include "include/KeywordSearch"


// If we were recording a sequence of animations for freestyle dancing - now is a good time to send it to the menu
SendFreestyleSequence()
{
    if (llGetListLength(remembered) > 0)
    {
        MessageAddFreestyle(rememberMenu, remembered);
        remembered = [];
    }
}


LoopThroughSequence()
{
    // Loop through the sequence till we either:
    //  1) Hit the end of the time sequence (done dancing this one)
    //  2) Hit a delay keyword - so we need to sleep for a while...
    //  3) and we are not waiting for a sequence to arrive
    currentKeyword = -1;
    tempInt1 = llListFindList([keywordDelay, keywordRand, keywordStop], [currentKeyword]);
    while ((timeSeqIndex < timeSeqLength) && (timeSeqIndex != SEQ_INDEX_WAITINGFORREPLY) && (CheckEqMinusOne(tempInt1)))
    {
        seqItem = llParseString2List(llList2String(timeSequence, timeSeqIndex), ["|"], []);
        currentKeyword = llList2Integer(seqItem, Define_SequenceKeyword);
        tmpStr = llList2String(seqItem, Define_SequenceParm1);
        ActionKeyword(currentKeyword);
        tempInt2 = llListFindList([keywordDelay, keywordRand], [currentKeyword]);
        if ((timeSeqIndex != SEQ_INDEX_WAITINGFORREPLY) && (CheckEqMinusOne(tempInt2)))       // Can't increment on delay or rand - it's not done till it's time has expired
        {
            ++timeSeqIndex;
        }
        tempInt1 = llListFindList([keywordDelay, keywordRand, keywordStop], [currentKeyword]);
    }
    
    // Stop means go get a wait sequence...
    if ((keywordStop == currentKeyword) || (timeSeqIndex >= timeSeqLength))
    {
        SendFreestyleSequence();

        if (useDefaultDuration)
        {
            // But stop/end of sequence for default duration means to go to the next selected dance
            //  as the duration of the current dance was shorter than the overall duration - so just
            //  go to the next dance.
            MessageUISelectNextDance();
            return;
        }

        MessageGetWait(Define_DANCECONTROLLINKID);
    }
}

default
{
    state_entry()
    {
    }

    changed(integer flag)
    {
        if (flag & CHANGED_OWNER)
            llResetScript();
    }

    // This script is controlled completely by linked messages - everything comes in and goes out with a linked message
    link_message(integer sender_num, integer num, string str, key id)
    {
        integer i2;

        if (num == Define_DANCECONTROLLINKID)
        {
            // Handle each of the different commands to this dance controller - we do the most likely ones first...
            Debug_DanceControl("DancerControl: msg:"+str)
            tmpList = llParseString2List(str, ["|"], []);
            i2 = llListFindList(["SEQUENCE","DEFERRED","WAITSEQ"], [llList2String(tmpList,0)]);    // Get back the select option which indicates if this is a deferred dance or not...
            if (CheckNeqMinusOne(i2))
            {
                if ((SelectOptionNone == i2) | (SelectOptionWaitseq == i2) | (!deferredStarted & (SelectOptionDeferred == i2)))
                {
                    if (rememberFlag)
                        if (needToRecordDelay && (llGetListLength(remembered) > 0))
                        {
                            danceElapsedTime +=  llGetAndResetTime();
    
                            // Put the delay into the freestyle sequence
                            tmpStr = (string)keywordDelay+"|"+(string)((integer)(danceElapsedTime*10.0));
                            AppendStringToList(remembered, tmpStr);
                            needToRecordDelay = FALSE;
                        }

                    danceSequenceFlag = TRUE;
                    if (SelectOptionWaitseq == i2)
                    {
                        SendFreestyleSequence();
                        danceSequenceFlag = FALSE;
                    }

                    seqName = llList2String(tmpList, 1);
                    danceFromMenu = llList2Integer(tmpList, 2);    // Sequence name is item 1, menu link # is item 2
                    timeSequence = llParseString2List((string)id, ["|||"], []);
                    danceStopsOthers = DanceFlagStopOtherAnimations;
                    timeSeqLength = llGetListLength(timeSequence);
                    timeSeqIndex = 0;
                    lastSyncPoint = 0;
                    giveFromSequence = [];
                    deferredStarted = llList2Integer([FALSE, TRUE], i2);    // And remember if we started a deferred sequence or not...
                }
                else
                {
                    // Ok - we got a second (or Nth) deferred request - which means we just append to the end
                    //  of the time sequence (every part is already time sequenced). There is a lil bit of special
                    //  because we need to get the sequence highlighted - so we use the ZZZDefer keyword which takes
                    //  two parameters - the name of the sequence and the menu linkid (need both for the highlight)
                    // Then - when this entry is played in the sequence - we will simply send the 'starting dance'
                    //  message for this sequence. The sequence name will match on that menu and get highlighted.
                    AppendStringToList(timeSequence, llDumpList2String([keywordZZZDefer,llList2String(tmpList,1),llList2Integer(tmpList,2)],"|"));
                    AppendListToList(timeSequence, llParseString2List((string)id, ["|||"],[]));
                    timeSeqLength = llGetListLength(timeSequence);
                    OwnerSay("DCMSG012", [llList2String(tmpList,1)]);
                }

                MessageStartedSequence(seqName, danceFromMenu);

                LoopThroughSequence();
                return;
            }

            i2 = (integer) str;    // Most commands are integers so they parse faster

            if (DanceControlStop == i2)
            {
                // Stop any ongoing dancing - we do this by stopping the timer and telling ALL dancers to stop dancing
                llSetTimerEvent(0.0);

                if (rememberFlag)
                {
                    if (currentKeyword == keywordDelay)
                    {
                        danceElapsedTime += llGetAndResetTime();

                        // Put the delay into the freestyle sequence
                        tmpStr = (string)keywordDelay+"|"+(string)((integer)(danceElapsedTime*10.0));
                        AppendStringToList(remembered, tmpStr);
                    }
                    SendFreestyleSequence();

                    remembered = [];
                    rememberFlag = FALSE;
                    rememberMenu = 0;
                    MessageSetRecordingSequences(rememberFlag);
                    OwnerSay("DCMSG002", []);
                }

                // The STOP command tells us that ALL dances have to be stopped - so stop them all...
                MessageStopGroupDancing(Define_GroupAllBits, DancerFlagStopAllDances);

                // Then release each and every dancer (if we need to)    
                if ((integer) ((string)id))
                {
                    MessageDCReleaseAllDancers();
                }
                
                return;
            }

            if (DanceControlLastDanceStartForDancer == i2)
            {
                    // List order is linkid, avname, avkey, channel #, animation, autoInviteFlag - most came to us
                    //  So we take off the link id and append the last animation string that we started with
                tmpList = llParseString2List((string) id, ["|"], []);
                i2 = llList2Integer(tmpList,0);
                tmpList = DeleteListEntry(tmpList, 0);
                AppendIntegerToList(tmpList, lastAnimStarted);
                MessageAddToDanceGroup(i2, tmpList);
                return;
            }

            // Send an IM to all of the dancers
            if (DanceControlIM == i2)
            {
                MessageSendGroupIM(id);
                return;
            }

            // Sync commands are easy - we just take the last sync point we were at, remember to
            //  stop all other dances and just start the sequence again at our sync point.
            if (i2 == DanceControlSyncDancers)
            {
                Trace("link_message:0",(string)lastSyncPoint)
                Debug_DanceControl("Sync received for sync point:"+(string)lastSyncPoint)

                if (rememberFlag & (currentKeyword == keywordDelay))
                {
                    danceElapsedTime +=  llGetAndResetTime();

                    // Put the delay into the freestyle sequence
                    tmpStr = (string)keywordDelay+"|"+(string)((integer)(danceElapsedTime*10.0));
                    AppendStringToList(remembered, tmpStr);
                }

                danceStopsOthers = DanceFlagSyncAnimations;
                timeSeqIndex = lastSyncPoint;
                LoopThroughSequence();
                return;
            }

            if (DanceControlAccurateTimer == i2)
            {
                accurateTimer = (integer)((string) id)
                Trace("link_message:1",(string)accurateTimer)
                return;
            }

            if (DanceControlStartRecording == i2)
            {
                remembered = [];
                list p = llParseString2List((string)id,["|"],[]);
                if (llList2Integer(p,1))
                {
                    rememberFlag = TRUE;
                    rememberMenu = llList2Integer(p,0);
                    OwnerSay("DCMSG001", [(rememberMenu-MenuBaseNumber)]);
                }
                else
                {
                    rememberFlag = FALSE;
                    rememberMenu = 0;
                    OwnerSay("DCMSG002", []);
                }
                return;
            }
            
            if (DanceControlMissingAnimWarning == i2)
            {
                warnMissingAnim = (integer)((string) id);
                warnMissingAnim = warnMissingAnim ^ TRUE;    // Invert the setting as param 0==show errors on dance, 1==show errors during load (sigh)
                return;
            } 
            
            if (DanceControlDisableRepeat == i2)
            {
                disableRepeat = (integer)((string) id);    // 0 = [repeat] works,  1 = [repeat] disabled
                return;
            }

            if (DanceControlSetDurationFlag == i2)
            {
                useDefaultDuration = (integer)((string) id);
                return;
            }
            if (DanceControlSetDurationValue == i2)
            {
                defaultDanceDuration = (integer)((string) id);
                return;
            }
        }    // End if for DanceControl only

        if (CheckEqZero(num) && ("RESET" == str))
        {
            llResetScript();
        }
    }

    timer()
    {
        llSetTimerEvent(0.0);    // Stop the next timer event (we already delayed for the delay keyword) - do this first!

        float currentTime = llGetAndResetTime();
        float offset;
        ++timeSeqIndex;        // Delay has expired - so on to the next item in the dance sequence


        danceElapsedTime += currentTime;    // Remember how long it's been so far

        if (accurateTimer)
        {
            // Ok - we woke up a little early (as the time event was set a little short of the desired delay)
            // So now we need to wait for just a little while here spinning the cpu... not great - but this
            // allows us to have very accurate timing for delays. We only do up to 100 changes on the delay
            // so that we know that we can NOT loop forevery here - if the timer doesn't change for some reason
            // we could have gotten stuck here for a LONG time - like forever. So - don't believe the timer
            // could do that - but if it did, now we limit the number of loops to 100 so that we can continue.
            float timeleft = delayValue - currentTime;
            integer count = 0;
            offset = timeleft;
            while( (timeleft > 0.01) & (count<100) )
            {
                timeleft -= llGetAndResetTime();
                ++count;
            }
            
            // If the offset is large and we are not remembering the sequence (i.e. not in
            // freestyle dance recording) then add the offset - which basically leads us back
            // to whatever the delay value as was specified.
            if ((offset > 0.01) && (!rememberFlag))
            {
                danceElapsedTime += offset;
            }

            if ((offset < 0.0) || (offset > 0.1))
            {
                shortenDelayBy = shortenDelayBy - offset + 0.005;    // Vary the adjustment by a little bit
            }
        }
        
        Trace("timer:1","DelayCompleted")

        // Put the delay into the freestyle sequence
        if (rememberFlag && needToRecordDelay)
        {
            tmpStr = (string)keywordDelay+"|"+(string)((integer)(danceElapsedTime*10.0));
            AppendStringToList(remembered, tmpStr);
            needToRecordDelay = FALSE;
        }

        // If we have a default dance delay that we have to honor... then check the total
        //  duratation and if we are at or over time - it's time for the next 'other' dance.
        if (useDefaultDuration)
        {
            if (danceElapsedTime > (float) defaultDanceDuration)
            {
                // Message to select next dance goes here... send to the UI for the current menu to do the work
                // (we don't know the current menu, or what to select... so let someone else decide)
                // we will just continue until the next sequence starts up...
                MessageUISelectNextDance();
                return;
            }
        }

        // Ok - we are on time now - get doing the next set of items on the sequence... wheeeeeeeeeeee....
        LoopThroughSequence();
    }
}
